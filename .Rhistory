stat_smooth(method="lm", se=FALSE, color = "black")+
scale_linetype_manual(values = c("solid", "dashed","dotted","solid"))+
scale_y_continuous(breaks = seq(2.5, 5.5, by = .50))+
theme_classic()+
theme(
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.title.x = element_text(face="bold",size=20,colour = "black"),
axis.title.y = element_text(size=20,colour = "black",
margin = margin(t = 0, r = 22, b = 0, l = 0)),
axis.text.x = element_text(size = 16,colour = "black"),
axis.text.y = element_text(size = 16,colour = "black"),
legend.position="right")+
xlab("Upstream Distance")+
#ylab(bquote(~'F'["IS"]))
#ylab(bquote(~'H'["O"]))
#ylab(bquote(~'H'["E"]))
ylab("Allelic Richness")
ggarrange(Plot_HE + theme(axis.title.x = element_blank(), axis.text.x = element_blank()), Plot_AR+ theme(axis.title.x = element_blank(), axis.text.x = element_blank()), Plot_HO, Plot_Fis,
#labels = c("A", "B"),
heights = c(1,1.2),
ncol = 2, nrow = 2,
common.legend = T,
legend = "right"
)
Plot_Fis <- ggplot(dat, aes(x = upstream_distance, y = Fis, group = Basin, shape = Basin, linetype = Basin))+
geom_point(size = 3)+
stat_smooth(method="lm", se=FALSE, color = "black")+
scale_linetype_manual(values = c("solid", "dashed","dotted","solid"))+
#scale_y_continuous(limits = c(0.3, 0.7))+
theme_classic()+
theme(
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.title.x = element_text(face="bold",size=20,colour = "black"),
axis.title.y = element_text(face="bold",size=20,colour = "black"),
axis.text.x = element_text(size = 16,colour = "black"),
axis.text.y = element_text(size = 16,colour = "black"),
legend.position="right",
legend.text=element_text(size=16))+
xlab("Upstream Distance")+
ylab(bquote(~'F'["IS"]))
ggarrange(Plot_HE + theme(axis.title.x = element_blank(), axis.text.x = element_blank()), Plot_AR+ theme(axis.title.x = element_blank(), axis.text.x = element_blank()), Plot_HO, Plot_Fis,
#labels = c("A", "B"),
heights = c(1,1.2),
ncol = 2, nrow = 2,
common.legend = T,
legend = "right"
)
Plot_HE <- ggplot(dat, aes(x = upstream_distance, y = He, group = Basin, shape = Basin, linetype = Basin))+
geom_point(size = 3)+
stat_smooth(method="lm", se=FALSE, color = "black")+
scale_linetype_manual(values = c("solid", "dashed","dotted","solid"))+
scale_y_continuous(limits = c(0.3, 0.7))+
theme_classic()+
theme(
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.title.x = element_text(face="bold",size=20, colour = "black"),
axis.title.y = element_text(face="bold",size=20,colour = "black"),
axis.text.x = element_text(size = 16,colour = "black"),
axis.text.y = element_text(size = 16,colour = "black"),
legend.position="right",
legend.text=element_text(size=16))+
xlab("Upstream Distance")+
#ylab(bquote(~'F'["IS"]))
#ylab(bquote(~'H'["O"]))
ylab(bquote(~'H'["E"]))
Plot_HO <- ggplot(dat, aes(x = upstream_distance, y = Ho, group = Basin, shape = Basin, linetype = Basin))+
geom_point(size = 3)+
stat_smooth(method="lm", se=FALSE, color = "black")+
scale_linetype_manual(values = c("solid", "dashed","dotted","solid"))+
scale_y_continuous(limits = c(0.3, 0.7))+
theme_classic()+
theme(
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.title.x = element_text(face="bold",size=20,colour = "black"),
axis.title.y = element_text(face="bold",size=20,colour = "black"),
axis.text.x = element_text(size = 16,colour = "black"),
axis.text.y = element_text(size = 16,colour = "black"),
legend.position="right",
legend.text=element_text(size=16))+
xlab("Upstream Distance")+
#ylab(bquote(~'F'["IS"]))
ylab(bquote(~'H'["O"]))
Plot_AR <- ggplot(dat, aes(x = upstream_distance, y = AR, group = Basin, shape = Basin, linetype = Basin))+
geom_point(size = 3)+
stat_smooth(method="lm", se=FALSE, color = "black")+
scale_linetype_manual(values = c("solid", "dashed","dotted","solid"))+
scale_y_continuous(breaks = seq(2.5, 5.5, by = .50))+
theme_classic()+
theme(
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.title.x = element_text(face="bold",size=20,colour = "black"),
axis.title.y = element_text(size=20,colour = "black",
margin = margin(t = 0, r = 22, b = 0, l = 0)),
axis.text.x = element_text(size = 16,colour = "black"),
axis.text.y = element_text(size = 16,colour = "black"),
legend.position="right",
legend.text=element_text(size=16))+
xlab("Upstream Distance")+
#ylab(bquote(~'F'["IS"]))
#ylab(bquote(~'H'["O"]))
#ylab(bquote(~'H'["E"]))
ylab("Allelic Richness")
Plot_Fis <- ggplot(dat, aes(x = upstream_distance, y = Fis, group = Basin, shape = Basin, linetype = Basin))+
geom_point(size = 3)+
stat_smooth(method="lm", se=FALSE, color = "black")+
scale_linetype_manual(values = c("solid", "dashed","dotted","solid"))+
#scale_y_continuous(limits = c(0.3, 0.7))+
theme_classic()+
theme(
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.title.x = element_text(face="bold",size=20,colour = "black"),
axis.title.y = element_text(face="bold",size=20,colour = "black"),
axis.text.x = element_text(size = 16,colour = "black"),
axis.text.y = element_text(size = 16,colour = "black"),
legend.position="right",
legend.text=element_text(size=16))+
xlab("Upstream Distance")+
ylab(bquote(~'F'["IS"]))
ggarrange(Plot_HE + theme(axis.title.x = element_blank(), axis.text.x = element_blank()), Plot_AR+ theme(axis.title.x = element_blank(), axis.text.x = element_blank()), Plot_HO, Plot_Fis,
#labels = c("A", "B"),
heights = c(1,1.2),
ncol = 2, nrow = 2,
common.legend = T,
legend = "right"
)
unique(dat$Basin)
levels(dat$Basin) <- c("Ch", "IB", "LC","MR")
Plot_HE <- ggplot(dat, aes(x = upstream_distance, y = He, group = Basin, shape = Basin, linetype = Basin))+
geom_point(size = 3)+
stat_smooth(method="lm", se=FALSE, color = "black")+
scale_linetype_manual(values = c("solid", "dashed","dotted","solid"))+
scale_y_continuous(limits = c(0.3, 0.7))+
theme_classic()+
theme(
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.title.x = element_text(face="bold",size=20, colour = "black"),
axis.title.y = element_text(face="bold",size=20,colour = "black"),
axis.text.x = element_text(size = 16,colour = "black"),
axis.text.y = element_text(size = 16,colour = "black"),
legend.position="right",
legend.text=element_text(size=16),
legend.title =element_text(size=18))+
xlab("Upstream Distance")+
#ylab(bquote(~'F'["IS"]))
#ylab(bquote(~'H'["O"]))
ylab(bquote(~'H'["E"]))
Plot_HO <- ggplot(dat, aes(x = upstream_distance, y = Ho, group = Basin, shape = Basin, linetype = Basin))+
geom_point(size = 3)+
stat_smooth(method="lm", se=FALSE, color = "black")+
scale_linetype_manual(values = c("solid", "dashed","dotted","solid"))+
scale_y_continuous(limits = c(0.3, 0.7))+
theme_classic()+
theme(
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.title.x = element_text(face="bold",size=20,colour = "black"),
axis.title.y = element_text(face="bold",size=20,colour = "black"),
axis.text.x = element_text(size = 16,colour = "black"),
axis.text.y = element_text(size = 16,colour = "black"),
legend.position="right",
legend.text=element_text(size=16),
legend.title =element_text(size=18))+
xlab("Upstream Distance")+
#ylab(bquote(~'F'["IS"]))
ylab(bquote(~'H'["O"]))
Plot_AR <- ggplot(dat, aes(x = upstream_distance, y = AR, group = Basin, shape = Basin, linetype = Basin))+
geom_point(size = 3)+
stat_smooth(method="lm", se=FALSE, color = "black")+
scale_linetype_manual(values = c("solid", "dashed","dotted","solid"))+
scale_y_continuous(breaks = seq(2.5, 5.5, by = .50))+
theme_classic()+
theme(
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.title.x = element_text(face="bold",size=20,colour = "black"),
axis.title.y = element_text(size=20,colour = "black",
margin = margin(t = 0, r = 22, b = 0, l = 0)),
axis.text.x = element_text(size = 16,colour = "black"),
axis.text.y = element_text(size = 16,colour = "black"),
legend.position="right",
legend.text=element_text(size=16),
legend.title =element_text(size=18))+
xlab("Upstream Distance")+
#ylab(bquote(~'F'["IS"]))
#ylab(bquote(~'H'["O"]))
#ylab(bquote(~'H'["E"]))
ylab("Allelic Richness")
Plot_Fis <- ggplot(dat, aes(x = upstream_distance, y = Fis, group = Basin, shape = Basin, linetype = Basin))+
geom_point(size = 3)+
stat_smooth(method="lm", se=FALSE, color = "black")+
scale_linetype_manual(values = c("solid", "dashed","dotted","solid"))+
#scale_y_continuous(limits = c(0.3, 0.7))+
theme_classic()+
theme(
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.title.x = element_text(face="bold",size=20,colour = "black"),
axis.title.y = element_text(face="bold",size=20,colour = "black"),
axis.text.x = element_text(size = 16,colour = "black"),
axis.text.y = element_text(size = 16,colour = "black"),
legend.position="right",
legend.text=element_text(size=16),
legend.title =element_text(size=18))+
xlab("Upstream Distance")+
ylab(bquote(~'F'["IS"]))
ggarrange(Plot_HE + theme(axis.title.x = element_blank(), axis.text.x = element_blank()), Plot_AR+ theme(axis.title.x = element_blank(), axis.text.x = element_blank()), Plot_HO, Plot_Fis,
#labels = c("A", "B"),
heights = c(1,1.2),
ncol = 2, nrow = 2,
common.legend = T,
legend = "right"
)
library(FSA)
setwd("C:/Users/Peuclide/Dropbox/Mysis metapopulations")
dat<- read.csv("wall_p2_11-13-17.csv")
setwd("~/Dropbox/Genetics/walleye_analysis/file_conversion")
dat<- read.csv("wall_p2_11-13-17.csv")
dat <- dat[,c(2,4,12,13)]
dat[is.na(dat)] <- ""
head(dat)
View(dat)
dat<- read.csv("wall_p2_11-13-17.csv")
View(dat)
dat <- dat[,c(2,4,12,13)]
dat[is.na(dat)] <- ""
dat$Allele.1 <- gsub("?",0,dat$Allele.1, fixed=TRUE)
dat$Allele.2 <- gsub("?",0,dat$Allele.2, fixed=TRUE)
dat$Allele.1[dat$Allele.1==""]<-0
dat[is.na(dat)] <- ""
x <- subset(dat, !(Allele.2==0|Allele.1 == 0))
y <- subset(dat, Allele.2==0|Allele.1 == 0)
y$Allele.1 <- 0
y$Allele.2 <- 0
dat <- rbind(x,y)
hets <- subset(dat, Allele.2!="")
homos <- subset(dat, Allele.2=="")
homos$Allele.2 <- homos$Allele.1
dat <- rbind(hets, homos)
dat$Allele.1 <- as.numeric(as.character(dat$Allele.1))
dat$Allele.2 <- as.numeric(as.character(dat$Allele.2))
dat_test <- subset(dat, Allele.1 != 0)
dat_test <- subset(dat, Allele.2 != 0)
x <- dat_test
dat2 <- reshape(x, timevar="Marker", idvar = "Sample.Name",  direction="wide")
dat2[is.na(dat2)] <- 0
fish <- read.csv("wall_samples.csv")
SampID <- dat2$Sample.Name #"Sample.Name" if ID not reformatted
location <- NULL
samplingLocations <- levels(fish$Collection.Location)
for(gt in SampID){
tmp <-fish$Collection.Location[fish$Sample.ID==gt]
location <- c(location,samplingLocations[tmp])
}
dat3 <- cbind(dat2, as.data.frame(location))
str(dat3)
colOrder <- c("Sample.Name", "location", "Allele.1.Svi2y",	"Allele.2.Svi2y",	"Allele.1.SviL6",	"Allele.2.SviL6",	"Allele.1.SviL4g",	"Allele.2.SviL4g",	"Allele.1.SviL8",	"Allele.2.SviL8",	"Allele.1.SviL5",
"Allele.2.SviL5",	"Allele.1.Svi7",	"Allele.2.Svi7",	"Allele.1.Svi6",	"Allele.2.Svi6",	"Allele.1.Svi4",	"Allele.2.Svi4","Allele.1.sviL7","Allele.2.sviL7")
fin.dat3 <- dat3[,colOrder]
str(fin.dat3)
str(write.csv(dat3, "/Users/peuclide/Dropbox/Genetics/walleye_analysis/file_conversion/wallPlate2.csv")
write.csv(fin.dat3, "/Users/peuclide/Dropbox/Genetics/walleye_analysis/file_conversion/wallPlate2.csv")
library(shiny); runApp('~/Documents/OneDrive/Documents/UVM/UVM Mysis/Mysis decline/Shiny/Mysis_density_app/mysisDensity.R')
runApp('~/Documents/OneDrive/Documents/UVM/UVM Mysis/Mysis decline/Shiny/Mysis_density_app/mysisDensity.R')
source('~/Documents/OneDrive/Documents/UVM/UVM Mysis/Mysis decline/Shiny/Mysis_density_app/mysisDensity.R', echo=TRUE)
runApp('~/Documents/OneDrive/Documents/UVM/UVM Mysis/Mysis decline/Shiny/Mysis_density_app/mysisDensity.R')
library(rsconnect)
deployApp()
runApp('~/Documents/OneDrive/Documents/UVM/UVM Mysis/Mysis decline/Shiny/Mysis_density_app/mysisDensity.R')
source('~/Documents/OneDrive/Documents/UVM/UVM Mysis/Mysis decline/Shiny/Mysis_density_app/mysisDensity.R', echo=TRUE)
runApp('~/Documents/OneDrive/Documents/UVM/UVM Mysis/Mysis decline/Shiny/Mysis_density_app/mysisDensity.R')
runApp('~/Documents/OneDrive/Documents/UVM/UVM Mysis/Mysis decline/Shiny/Mysis_density_app/mysisDensity.R')
setwd("~/Documents/OneDrive/Rmd_Sydney_website/Sydney_website")
rmarkdown::render_site()
x <- ddply(smelt, .(Basin, Year, Age), summarize,
mean = round(mean(Length,  na.rm = T), 2),
sd = round(sd(Length,  na.rm = T), 2))
library(ggplot2)
library(plyr)
library(raster)
library(raster)
library(gridExtra)
library(grid)
setwd("~/Documents/OneDrive/Documents/UVM/PhD/Smelt/Smelt Data")
smelt <- subset(dat, Species == "Rainbow Smelt" )
smelt <- subset(dat, Species == "Rainbow Smelt" )
dat <- read.csv("MasterFileSmeltBio1984-2015-2-24-16.csv", na.strings=c("","NA"))
smelt <- subset(dat, Species == "Rainbow Smelt" )
smelt$Year <- as.numeric(as.character(smelt$Year))
x <- ddply(smelt, .(Basin, Year, Age), summarize,
mean = round(mean(Length,  na.rm = T), 2),
sd = round(sd(Length,  na.rm = T), 2))
x_A1 <- subset(x, Age == 1)
x_A2 <- subset(x, Age == 2)
x_2 <- ddply(smelt, .(Year, Age), summarize,
mean = round(mean(Length,  na.rm = T), 2),
sd = round(sd(Length,  na.rm = T), 2))
x_2_A1 <- subset(x_2, Age == 1)
x_2_A2 <- subset(x_2, Age == 2)
it <- c(1:nrow(x_A2))
tmp <- NULL
tmp_2 <- NULL
tmp_2_A1_len <- NULL
tmp_A1_Len <- NULL
tmp_Basin <- NULL
tmp_A2_yr <- NULL
tmp_A1_yr <- NULL
tmp_A2_len <- NULL
head(x_A2)
for(i in it){
tmp <-ifelse(length(x_A1[x_A1$Basin == x_A2[i,"Basin"]& x_A1$Year == x_A2[i,"Year"]-1, "mean"])>0 , x_A1[x_A1$Basin == x_A2[i,"Basin"]& x_A1$Year == x_A2[i,"Year"]-1, "mean"], "ND")
tmp_2 <- x_2_A1[x_2_A1$Year ==x_A2[i,"Year"]-1,"mean"]
tmp_2_A1_len <- c(tmp_2_A1_len,tmp_2)
tmp_A1_Len <- c(tmp_A1_Len, tmp)
tmp_Basin <- c(tmp_Basin, as.character(x_A2[i,"Basin"]))
tmp_A2_yr <- c(tmp_A2_yr, x_A2[i,"Year"])
tmp_A1_yr <- c(tmp_A1_yr, x_A2[i,"Year"]-1)
#tmp_A2_len <- c(tmp_A2_len, x_A2[i,"mean"])
}
df <- as.data.frame(cbind(tmp_Basin, tmp_A2_yr, tmp_A1_yr,tmp_A1_Len, tmp_2_A1_len))
head(df)
df$tmp_A1_Len <- as.numeric(as.character(df$tmp_A1_Len))
df$tmp_2_A1_len <- as.numeric(as.character(df$tmp_2_A1_len))
df$tmp_A2_yr <- as.integer(as.character(df$tmp_A2_yr))
df$tmp_A1_yr <- as.integer(as.character(df$tmp_A1_yr))
head(df)
head(smelt)
lm(smelt$Length[smelt$Age == 1&Basin == "Main Lake"&Year = 2011]~smelt$Length[smelt$Age == 2&Basin == "Main Lake"&Year = 2012])
lm(smelt$Length[smelt$Age == 1&Basin == "Main Lake"&Year == 2011]~smelt$Length[smelt$Age == 2&Basin == "Main Lake"&Year == 2012])
lm(smelt$Length[smelt$Age == 1&smelt$Basin == "Main Lake"&smelt$Year == 2011]~smelt$Length[smelt$Age == 2&smelt$Basin == "Main Lake"&smelt$Year == 2012])
sm2011 <- subset(smelt, Year == 2011 & Age == 1 & Basin == "Main Lake")
sm2012<- subset(smelt, Year == 2012 & Age == 2 & Basin == "Main Lake")
sm11to12 <- rbind(sm2011,sm2012)
lm(Length~Age, data = sm11to12)
sm2011 <- subset(smelt, Year == 2011 & Age == 1 )
sm2012<- subset(smelt, Year == 2012 & Age == 2 )
sm11to12 <- rbind(sm2011,sm2012)
lm(Length~Age*Basin, data = sm11to12)
summary(lm(Length~Age*Basin, data = sm11to12))
anova(lm(Length~Age*Basin, data = sm11to12))
yrs <- unique(smelt$Year)
yrs
lmTMP <- lm(Length~Age*Basin, data = sm11to12)
lmTMP
lmTMP$fitted.values
lmTMP$coefficients
summary(lmTMP)
lmTMP <- lm(Length~Age, data = sm11to12)
lmTMP
lmTMP <- lm(Length~Age, data = sm11to12[sm11to12$Basin=="Northeast"])
lmTMP <- lm(Length~Age, data = sm11to12[sm11to12$Basin=="Northeast",])
lmTMP
summary(lmTMP)
lmTMP <- lm(Length~Age, data = sm11to12[sm11to12$Basin=="Northeast",])
lmTMP2 <- lm(Length~Age, data = sm11to12[sm11to12$Basin=="Northeast",])
rbind(lmTMP$coefficients, lmTMP2$coefficents)
lmTMP$coefficients
lmTMP2$coefficents
rbind(lmTMP$coefficients, lmTMP2$coefficients)
sm1ml <- NULL
sm2ml <- NULL
coefml <- NULL
yrs <- unique(smelt$Year)
for(i in yrs){
sm1ml <- subset(smelt, Year == i & Age == 1 )
sm2ml <- subset(smelt, Year == i+1 & Age == 2 )
sm1to2ml <- rbind(sm1,sm2)
lmTMP <- lm(Length~Age*, data = sm1to2ml)
sm1ml <- NULL
sm2ml <- NULL
coefml <- NULL
yrs <- unique(smelt$Year)
for(i in yrs){
sm1ml <- subset(smelt, Year == i & Age == 1 )
sm2ml <- subset(smelt, Year == i+1 & Age == 2 )
sm1to2ml <- rbind(sm1,sm2)
lmTMP <- lm(Length~Age, data = sm1to2ml)
coefml <- cbind(coefml, lmTMP$coefficients)
}
sm1ml <- NULL
sm2ml <- NULL
coefml <- NULL
yrs <- unique(smelt$Year)
for(i in yrs){
sm1ml <- subset(smelt, Year == i & Age == 1 )
sm2ml <- subset(smelt, Year == i+1 & Age == 2 )
sm1to2ml <- rbind(sm1ml,sm2ml)
lmTMP <- lm(Length~Age, data = sm1to2ml)
coefml <- cbind(coefml, lmTMP$coefficients)
}
sm1to2ml
sm1to2ml
sm1to2ml
sm1ml <- NULL
sm2ml <- NULL
coefml <- NULL
sm1to2ml <- NULL
yrs <- unique(smelt$Year)
for(i in yrs){
sm1ml <- subset(smelt, Year == i & Age == 1 )
sm2ml <- subset(smelt, Year == i+1 & Age == 2 )
sm1to2ml <- rbind(sm1ml,sm2ml)
lmTMP <- lm(Length~Age, data = sm1to2ml)
coefml <- cbind(coefml, lmTMP$coefficients)
}
sm1ml
i <- 1987
sm1ml <- subset(smelt, Year == i & Age == 1 )
sm2ml <- subset(smelt, Year == i+1 & Age == 2 )
sm2ml
sm2ml <- subset(smelt, Year == i+1 & Age == 2 )
sm1ml <- subset(smelt, Year == i & Age == 1 )
sm1ml
str(sm1ml)
View(sm1ml)
View(sm2ml)
sm1to2ml <- rbind(sm1ml,sm2ml)
lmTMP <- lm(Length~Age, data = sm1to2ml)
smelt90 <- subset(smelt Year >=1990)
smelt90 <- subset(smelt Year >= 1990)
smelt90 <- subset(smelt, "Year" >= 1990)
smelt90 <- droplevels(smelt90)
sm1ml <- NULL
sm2ml <- NULL
coefml <- NULL
sm1to2ml <- NULL
yrs <- unique(smelt90$Year)
yrs <- unique(smelt90$Year)
for(i in yrs){
sm1ml <- subset(smelt90, Year == i & Age == 1 )
sm2ml <- subset(smelt90, Year == i+1 & Age == 2 )
sm1to2ml <- rbind(sm1ml,sm2ml)
lmTMP <- lm(Length~Age, data = sm1to2ml)
coefml <- cbind(coefml, lmTMP$coefficients)
}
i <- 1990
yrs <- unique(smelt90$Year)
for(i in yrs){
sm1ml <- subset(smelt90, Year == i & Age == 1 )
sm2ml <- subset(smelt90, Year == i+1 & Age == 2 )
sm1to2ml <- rbind(sm1ml,sm2ml)
lmTMP <- lm(Length~Age, data = sm1to2ml)
coefml <- cbind(coefml, lmTMP$coefficients)
}
sm1ml <- subset(smelt90, Year == i & Age == 1 )
sm2ml <- subset(smelt90, Year == i+1 & Age == 2 )
sm1to2ml <- rbind(sm1ml,sm2ml)
lmTMP <- lm(Length~Age, data = sm1to2ml)
sm2ml
head(smelt90)
head(sm2ml)
head(smelt90[Year == 1991])
yrs
head(smelt90[Year == 1991,])
head(smelt90[smelt90$Year == 1991,])
subset(smelt90, Year == i+1 & Age == 2 )
i <- 1990
i+1
subset(smelt90, Year == i+1 & Age == 2 )
i <- 1990
sm1ml <- subset(smelt90, Year == i & Age == 1 )
sm2ml <- subset(smelt90, Year == i+1 & Age == 2 )
sm1ml
View(smelt90)
View(sm1ml)
View(sm2ml)
sm1to2ml <- rbind(sm1ml,sm2ml)
lmTMP <- lm(Length~Age, data = sm1to2ml)
coefml <- cbind(coefml, lmTMP$coefficients)
coefml
i <- 1990
sm1ml <- subset(smelt90, Year == i & Age == 1 & Basin == "Main Lake")
sm2ml <- subset(smelt90, Year == i+1 & Age == 2 & Basin == "Main Lake" )
sm1to2ml <- rbind(sm1ml,sm2ml)
lmTMP <- lm(Length~Age, data = sm1to2ml)
coefml <- cbind(coefml, lmTMP$coefficients)
coefml
coefml <- NULL
sm1ml <- NULL
sm2ml <- NULL
coefml <- NULL
sm1to2ml <- NULL
sm1ml <- subset(smelt90, Year == i & Age == 1 & Basin == "Main Lake")
sm2ml <- subset(smelt90, Year == i+1 & Age == 2 & Basin == "Main Lake" )
sm1to2ml <- rbind(sm1ml,sm2ml)
lmTMP <- lm(Length~Age, data = sm1to2ml)
coefml <- cbind(coefml, lmTMP$coefficients)
coefml
yrs <- unique(smelt90$Year)
for(i in yrs){
sm1ml <- subset(smelt90, Year == i & Age == 1 & Basin == "Main Lake")
sm2ml <- subset(smelt90, Year == i+1 & Age == 2 & Basin == "Main Lake" )
sm1to2ml <- rbind(sm1ml,sm2ml)
lmTMP <- lm(Length~Age, data = sm1to2ml)
coefml <- cbind(coefml, lmTMP$coefficients)
}
mods = dlply(smelt90, .(Basin, Year, Age), lm, formula = y ~ x1 + x2)
mods = dlply(smelt90, .(Basin, Year, Age), lm, formula = Length ~ Age)
mods = dlply(smelt90, .(Basin, Year, Age), lm, formula = Length ~ Basin)
mods = dlply(smelt90, .(Age), lm, formula = Length ~ Basin)
mods = dlply(smelt90, .(Age), lm, formula = Length ~ Basin)
mods = ddlply(smelt90, .(Age), lm, formula = Length ~ Basin)
mods = dlply(smelt90, .(Age), lm, formula = Length ~ Basin)
ddply(smelt90, .(Age, Year), summarize,
mean = mean(Length)
)
